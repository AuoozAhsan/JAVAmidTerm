***ANSWER ALL OF THE QUESTIONS BELOW***

What is a programming language?
Answer: A programming language is a system of notation for writing computer programs. It is a language people use when developing software to tell a computer what to do.

What is a JDK composed of? Define each components?
Answer: The Java Development Kit (JDK) is a software development environment used for developing Java applications and applets. It includes the following components.
 Java Runtime Environment (JRE)
 An interpreter/loader (java)
 A compiler (javac)
 An archiver (jar)
 A documentation generator (javadoc)
 Additional files needed to write Java applets and applications

What is an IDE?
Answer: An IDE, or Integrated Development Environment, enables programmers to consolidate the different aspects of writing a computer program.
IDEs increase programmer productivity by combining common activities of writing software into a single application: editing source code, building executables, and debugging.

What are some of the most popular Java IDEs available in the market?
Answer: Some of the most popular Java IDEs are:
 Eclipse
 NetBeans
 IntelliJ IDEA (including Android Studio)
  BlueJ
  JCreator

Explain the entire java life cycle.
Answer: Life cycle of a java program tells us what happens right from the point when we type source code in a text editor to the point that source code is converted into machine code (0’s and 1’s).
There are three main stages in the life cycle of a java program. They are:
- Editing the program
- Compiling the source code
- Executing the byte code
First, you will start with typing the program in a text-editor (ex: notepad, notepad++, wordpad, textedit etc). After completing editing of the program, we have to save the file. While saving the file you should remember that the file must be saved with .java extension. For example, let’s think that I had written a Java program which contains a single class Sample (more on classes in future posts). It is a good convention to save the file with the name of the class. So, as per my example, the file will be saved as Sample.java
Second step is compilation. The name of the Java compiler is javac. The input to the compiler is Java source code which is available in Sample.java. The output of the compiler is machine independent or platform independent code which is known as bytecode. The file which is generated after compilation is .class file. As per my example, the bytecode file will be Sample.class.
Last step is execution. The bytecode generated by the compiler will be executed by Java Virtual Machine (JVM). Input to the JVM is bytecode and output is machine code (0’s and 1’s) which will be executed by the CPU of the local machine.

What is a class?
Answer: A Class is like an object constructor, or a "blueprint" for creating objects.
To create a class, use the keyword class.
A Class in Java can contain:
- Data member
- Method
- Constructor
- Nested Class
- Interface

What is an object?
Answer: It is a basic unit of Object-Oriented Programming and represents real-life entities. A typical Java program creates many objects, which as you know, interact by invoking methods. An object consists of :
State: It is represented by attributes of an object. It also reflects the properties of an object.
Behavior: It is represented by the methods of an object. It also reflects the response of an object with other objects.
Identity: It gives a unique name to an object and enables one object to interact with other objects.

What is the entry point of a Java project?
Answer: When you launch the JVM, you specify a class to run, and it is the main() of this class where your program starts.

Why is the main() method static?
Answer: Java main() method is always static, so that compiler can call it without the creation of an object or before the creation of an object of the class.

Which class is the superclass of all classes?
Answer: The super base class of all the Java classes is the java.lang.Object class. In Java, each Java descends from the Object.

What is difference between path and classpath variables?
Answer: PATH is an environment variable that is used to find and locate binary files like “java” and “javac” and to locate needed executables from the command line or Terminal window.
Classpath is an environment variable that is used by the application ClassLoader or system to locate and load the compiled Java bytecodes stored in the .class file.

What is the difference between an Interface and Abstract class?
Answer: Abstract class and interface are both used to define contracts in object-oriented programming, but there are some key differences between them.
An abstract class is a class that cannot be instantiated and can contain both abstract and non-abstract methods. An interface, on the other hand, is a contract that specifies a set of methods that a class must implement.

Can you make an Object from an Interface and Abstract class? If yes or no, how would you do it?
Answer: You can not instantiate an abstract class or an interface - you can instantiate one of their subclasses/implementers.

What is Access Modifier?
Answer: Access modifiers in Java helps to restrict the scope of a class, constructor, variable, method, or data member. There are four types of access modifiers available in java:
- Default – No keyword required
- Private
- Protected
- Public

What is OOP? Define each OOP concept.
Answer: Object-Oriented Programming or OOPs refers to languages that use objects in programming. Object-oriented programming aims to implement real-world entities like inheritance, hiding, polymorphism, etc in programming. The main aim of OOP is to bind together the data and the functions that operate on them so that no other part of the code can access this data except that function.
OOPs Concepts:
- Class
- Objects
- Data Abstraction
- Encapsulation
- Inheritance
- Polymorphism

What is Java Package and which package is imported by default?
Answer:

What is an API? List some API's that you have used so far.
Answer:

Does java support multiple inheritance? Why or why not?
Answer:

What is method overloading? List all of the different ways to overload.
Answer:

Explain exceptions in java and how to handle them.
Answer:

What is static keyword? When and how do we use it?
Answer:

What is final keyword? When and how do we use it?
Answer:

Explain the difference between final, finally and finalize?
Answer:

What is a constructor?
Answer:

Can we have multiple constructors in a class?
Answer:

If we don't have a constructor declared, what is called during the object creation?
Answer:

What is "this" keyword in Java? When would we use it?
Answer:

What is "super" keyword in Java? What are some scenarios we would use it?
Answer:

What does JVM stand for?
Answer:

Is JVM platform independent?
Answer:

What version of Java are you using?
Answer:

What does JAR stand for?
Answer:

What is the difference between JDK and JVM?
Answer:

What is the difference between JVM and JRE?
Answer:

Explain the difference between compile-time and run-time?
Answer:

What is heap?
Answer:

How does Java manage its memory?
Answer:

What is the difference between String, StringBuffer and StringBuilder?
Answer:

What is Singleton class?
Answer:

What is Serialization and Deserialization?
Answer:

Explain the difference between While and Do..While loops?
Answer:

What is Enum?
Answer:

What is Iterator?
Answer:

Which one will take more memory: an int or Integer? Why?
Answer:

Why are Strings considered to be immutable in Java?
Answer:

What is constructor chaining in Java?
Answer:

The difference between Serial and Parallel Garbage Collector?
Answer:

What does JIT stands for?
Answer:

Explain the process of Java garbage collection?
Answer:

Can you guarantee the garbage collection process?
Answer:

What is the difference between stack and heap in Java?
Answer:

What is reflection in Java and why is it useful?
Answer:

What is multithreading in Java?
Answer:

What is synchronization in Java?
Answer:

What is a Framework?
Answer:

What are the testing Frameworks available in Java?
Answer:

What are jUnit and testNG?
Answer:

What are the dependencies for this project?
Answer:

What is dependency injection in Java?
Answer:

Explain what static binding and dynamic binding is?
Answer: